---
# Source: containerssh-backend/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: containerssh
  labels:
    name: containerssh
---
# Source: containerssh-backend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: containerssh
  namespace: containerssh
  labels:
    app: containerssh
---
# Source: containerssh-backend/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: containerssh-config
  namespace: containerssh
  labels:
    app: containerssh

data:
  config.yaml: |
    ssh:
      listen: "0.0.0.0:2222"
      hostkeys:
        - /etc/containerssh/host.key
      banner: |
        Welcome to ContainerSSH!
        Enter any username and password to continue.

    auth:
      password:
        method: webhook
        webhook:
          url: "http://containerssh-auth-service.containerssh.svc.cluster.local"
      publicKey:
        method: webhook
        webhook:
          url: "http://containerssh-auth-service.containerssh.svc.cluster.local"
      
      config:
        method: webhook
        webhook:
          url: "http://containerssh-config-service"
      timeout: 60s

    backend: kubernetes
    kubernetes:
      connection:
        host: kubernetes.default.svc
        cacertFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token

      pod:
        metadata:
          namespace: containerssh
          labels:
            app: containerssh-guest
            managed-by: containerssh
        spec:
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
          containers:
          - name: shell
            image: containerssh-guest:ubuntu22.04
            #image: containerssh-guest:ubuntu22.04
            command:
              - /bin/bash
            stdin: true
            tty: true
            env:
              - name: USER
                value: jy
              - name: HOME
                value: "/home/jy"
              - name: SHELL
                value: "/bin/bash"
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
            volumeMounts:
              - name: user-home
                mountPath: /home/share
                readOnly: false
          volumes:
            - name: user-home
              persistentVolumeClaim:
                claimName: pvc-jy-share
          restartPolicy: Never

    log:
      level: "info"
      format: "text"
---
# Source: containerssh-backend/templates/deployed-configmap.yaml
apiVersion: v1
data:
  config.yaml: |
    ssh:
      listen: "0.0.0.0:2222"
      hostkeys:
        - /etc/containerssh/host.key
      banner: |
        Welcome to ContainerSSH!
        Enter any username and password to continue.

    auth:
      password:
        webhook:
          url: "http://containerssh-auth-service.containerssh.svc.cluster.local/password"
      publicKey:
        webhook:
          url: "http://containerssh-auth-service.containerssh.svc.cluster.local/pubkey"
      timeout: 60s

    backend: kubernetes
    kubernetes:
      connection:
        host: kubernetes.default.svc
        cacertFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token

      pod:
        metadata:
          namespace: containerssh
          labels:
            app: containerssh-guest
            managed-by: containerssh
        spec:
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
          containers:
          - name: shell
            image: containerssh/containerssh:v0.5
            command:
              - /bin/bash
            stdin: true
            tty: true
            env:
              - name: USER
                value: guest
              - name: HOME
                value: "/home/guest"
              - name: SHELL
                value: "/bin/bash"
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
            volumeMounts:
              - name: user-home
                mountPath: /home/share
                readOnly: false
          volumes:
            - name: user-home
              persistentVolumeClaim:
                claimName: pvc-guest-share
          restartPolicy: Never

    log:
      level: "info"
      format: "text"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: containerssh
    meta.helm.sh/release-namespace: containerssh
  creationTimestamp: "2025-07-14T14:56:55Z"
  labels:
    app: containerssh
    app.kubernetes.io/managed-by: Helm
  name: containerssh-config
  namespace: containerssh
  resourceVersion: "5756382"
  uid: d0cd662e-a36c-4cec-aed4-7fd08990b7af
---
# Source: containerssh-backend/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: containerssh
  name: containerssh-role
  labels:
    app: containerssh
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
---
# Source: containerssh-backend/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: containerssh-rolebinding
  namespace: containerssh
  labels:
    app: containerssh
subjects:
- kind: ServiceAccount
  name: containerssh
  namespace: containerssh
roleRef:
  kind: Role
  name: containerssh-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: containerssh-backend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: containerssh
  namespace: containerssh
  labels:
    app: containerssh
spec:
  type: NodePort  # 필요에 따라 ClusterIP, LoadBalancer로 변경 가능
  selector:
    app: containerssh
  ports:
    - name: ssh
      port: 2222
      targetPort: 2222
      protocol: TCP
      nodePort: 9730  # 예: 9700~9797 중 하나
---
# Source: containerssh-backend/templates/deployed-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
    meta.helm.sh/release-name: containerssh
    meta.helm.sh/release-namespace: containerssh
  creationTimestamp: "2025-07-14T14:56:55Z"
  generation: 7
  labels:
    app.kubernetes.io/managed-by: Helm
  name: containerssh
  namespace: containerssh
  resourceVersion: "5830732"
  uid: f1f72c15-520d-40e4-9035-6d04c4a55c58
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: containerssh
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: "2025-07-15T05:41:16+09:00"
      creationTimestamp: null
      labels:
        app: containerssh
    spec:
      containers:
      - image: containerssh/containerssh:v0.5
        imagePullPolicy: IfNotPresent
        name: containerssh
        ports:
        - containerPort: 2222
          name: ssh
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/containerssh/host.key
          name: hostkey
          readOnly: true
          subPath: host.key
        - mountPath: /etc/containerssh/config.yaml
          name: config
          readOnly: true
          subPath: config.yaml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: containerssh
      serviceAccountName: containerssh
      terminationGracePeriodSeconds: 30
      volumes:
      - name: hostkey
        secret:
          defaultMode: 420
          secretName: containerssh-hostkey
      - configMap:
          defaultMode: 420
          name: containerssh-config
        name: config
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2025-07-15T03:04:38Z"
    lastUpdateTime: "2025-07-15T03:04:38Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2025-07-15T02:58:28Z"
    lastUpdateTime: "2025-07-15T03:04:38Z"
    message: ReplicaSet "containerssh-69cb54689c" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 7
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
---
# Source: containerssh-backend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: containerssh
  namespace: containerssh
spec:
  replicas: 1
  selector:
    matchLabels:
      app: containerssh
  template:
    metadata:
      labels:
        app: containerssh
    spec:
      serviceAccountName: containerssh
      containers:
        - name: containerssh
          image: "containerssh/containerssh:v0.5"
          ports:
            - containerPort: 2222
              name: ssh
              protocol: TCP
          volumeMounts:
            - name: hostkey
              mountPath: /etc/containerssh/host.key
              subPath: host.key
              readOnly: true
            - name: config
              mountPath: /etc/containerssh/config.yaml
              subPath: config.yaml
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
      volumes:
        - name: hostkey
          secret:
            secretName: containerssh-hostkey
        - name: config
          configMap:
            name: containerssh-config
